// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Cidco.Middleware.Domain.Entities;
using Microsoft.EntityFrameworkCore;

namespace Cidco.Middleware.Domain;

public partial class CidcoMiddlewareDBContext : DbContext
{
    public CidcoMiddlewareDBContext(DbContextOptions<CidcoMiddlewareDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AapleUserTb> AapleUserTbs { get; set; }

    public virtual DbSet<Apiuser> Apiusers { get; set; }

    public virtual DbSet<LogInformation> LogInformations { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<StatusTb> StatusTbs { get; set; }

    public virtual DbSet<VwDailyScrollReport> VwDailyScrollReports { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AapleUserTb>(entity =>
        {
            entity.HasKey(e => e.Tid).HasName("PK_aapleUserTn");

            entity.ToTable("aapleUserTb");

            entity.Property(e => e.Tid).HasColumnName("tid");
            entity.Property(e => e.ActualServiceDate).HasColumnType("datetime");
            entity.Property(e => e.Age).HasMaxLength(50);
            entity.Property(e => e.Amount)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("amount");
            entity.Property(e => e.ApplicationDate).HasMaxLength(50);
            entity.Property(e => e.ApplicationId)
                .HasMaxLength(50)
                .HasColumnName("ApplicationID");
            entity.Property(e => e.Appstatus).HasMaxLength(50);
            entity.Property(e => e.DigitalDate).HasMaxLength(50);
            entity.Property(e => e.Digitalstatus).HasMaxLength(50);
            entity.Property(e => e.DistrictPrefix).HasMaxLength(50);
            entity.Property(e => e.Districtid)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Divisionid).HasMaxLength(50);
            entity.Property(e => e.Dob)
                .HasMaxLength(50)
                .HasColumnName("DOB");
            entity.Property(e => e.EmailId)
                .HasMaxLength(100)
                .HasColumnName("EmailID");
            entity.Property(e => e.Entrydate)
                .HasColumnType("datetime")
                .HasColumnName("entrydate");
            entity.Property(e => e.Fullname).HasMaxLength(500);
            entity.Property(e => e.FullnameMr)
                .HasMaxLength(500)
                .HasColumnName("Fullname_mr");
            entity.Property(e => e.Gender)
                .HasMaxLength(50)
                .HasColumnName("gender");
            entity.Property(e => e.Mobileno).HasMaxLength(50);
            entity.Property(e => e.Occupation).HasMaxLength(50);
            entity.Property(e => e.Panno)
                .HasMaxLength(50)
                .HasColumnName("PANNo");
            entity.Property(e => e.Password).HasMaxLength(500);
            entity.Property(e => e.PasswordChanged).HasMaxLength(50);
            entity.Property(e => e.PayDate).HasMaxLength(50);
            entity.Property(e => e.PayStatus).HasMaxLength(50);
            entity.Property(e => e.Pincode)
                .HasMaxLength(50)
                .HasColumnName("pincode");
            entity.Property(e => e.RegistrationType).HasMaxLength(50);
            entity.Property(e => e.RejectReason).IsUnicode(false);
            entity.Property(e => e.Remark).HasMaxLength(50);
            entity.Property(e => e.RequestFlag).HasMaxLength(50);
            entity.Property(e => e.ServiceDate).HasMaxLength(50);
            entity.Property(e => e.ServiceDays)
                .HasMaxLength(50)
                .HasColumnName("serviceDays");
            entity.Property(e => e.ServiceId)
                .HasMaxLength(50)
                .HasColumnName("ServiceID");
            entity.Property(e => e.StrServiceCookie).HasColumnName("strServiceCookie");
            entity.Property(e => e.Talukaid)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Trackid)
                .HasMaxLength(50)
                .HasColumnName("trackid");
            entity.Property(e => e.Uidno)
                .HasMaxLength(50)
                .HasColumnName("UIDNO");
            entity.Property(e => e.UserName).HasMaxLength(500);
            entity.Property(e => e.Userid)
                .HasMaxLength(50)
                .HasColumnName("userid");
            entity.Property(e => e.UsertypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrSession).HasMaxLength(50);
            entity.Property(e => e.Villageid)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Apiuser>(entity =>
        {
            entity.ToTable("APIUsers");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<LogInformation>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("LogInformation");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ErrorInfo).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VenderName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.HasKey(e => e.Tid);

            entity.Property(e => e.Tid)
                .ValueGeneratedNever()
                .HasColumnName("tid");
            entity.Property(e => e.Daystaken)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("daystaken");
            entity.Property(e => e.LinkedUrl).HasColumnName("linkedURL");
            entity.Property(e => e.ServiceHead)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceModule)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StatusTb>(entity =>
        {
            entity.HasKey(e => e.StatusId);

            entity.ToTable("StatusTb");

            entity.Property(e => e.StatusId)
                .ValueGeneratedNever()
                .HasColumnName("StatusID");
            entity.Property(e => e.StatusDesc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDailyScrollReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDailyScrollReport");

            entity.Property(e => e.AppDate).HasColumnName("appDate");
            entity.Property(e => e.Appaddress)
                .IsUnicode(false)
                .HasColumnName("appaddress");
            entity.Property(e => e.Applicantname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationUid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ApplicationUID");
            entity.Property(e => e.Apptime)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("apptime");
            entity.Property(e => e.Cfccenter)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CFCCenter");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("comments");
            entity.Property(e => e.Emailid)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("emailid");
            entity.Property(e => e.Enterby)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("enterby");
            entity.Property(e => e.Entrydate)
                .HasColumnType("datetime")
                .HasColumnName("entrydate");
            entity.Property(e => e.Entrymode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entrymode");
            entity.Property(e => e.Mobileno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModeofPayment)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModuleAppNo).HasMaxLength(500);
            entity.Property(e => e.Registrationcharge).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Servicemodule)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("servicemodule");
            entity.Property(e => e.Services)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Tid)
                .ValueGeneratedOnAdd()
                .HasColumnName("tid");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}